@page "/"
@using VisualCtf.Services
@using VisualCtf.ViewModels

@inject CtfService Ctf
@inject AuthenticationStateProvider AuthenticationStateProvider

<MudPaper Elevation="0" Class="pa-5">
    <MudGrid Spacing="2" Justify="Justify.FlexStart">
        <MudItem xs="12" md="4" xl="3">
            <h1>Visual CTF</h1>
            <p>Quickly get an overview of your Contentful content types.</p>
        </MudItem>
        <MudItem xs="12" sm="6" md="4" xl="3">
            <AuthorizeView>
                <Authorized>
                    @if (appState.Spaces != null)
                    {
                        <MudSelect T="String" Label="Space" Strict="true" Variant="Variant.Outlined" Format="F2" ValueChanged="ShowTypes">
                            @foreach (var space in appState.Spaces)
                            {
                                <MudSelectItem Value="@space.SystemProperties.Id">@space.Name</MudSelectItem>
                            }
                        </MudSelect>
                    }
                </Authorized>
                <NotAuthorized>
                    <p>
                        Please read the <a href="/about">about section</a> before logging in for the first time.
                    </p><br/><br />
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Link="/account/login/">Log in</MudButton>

                </NotAuthorized>
            </AuthorizeView>
        </MudItem>
        
        <AuthorizeView>
            <Authorized>
                <MudItem xs="12" sm="6" md="4" Class="py-3 px-5 mud-typography-body1">
                    <h3>SETTINGS (Todo)</h3>
                    <MudSwitch Color="Color.Primary" @bind-Checked=@(appState.DoGrouping) Label="Group types" /><br/>
                    <table>
                        <tr>
                            <td><b>Group divider</b></td>
                            <td> " > " <MudIcon Icon="@(Icons.Filled.Edit)" Size="Size.Small" Style="vertical-align: text-top" /></td>
                        </tr>
                        <tr>
                            <td><b>Order by</b></td>
                            <td>
                                <MudForm>
                                    <MudRadioGroup @bind-SelectedOption="@appState.GroupBy">
                                        <MudRadio Option="@("name")" Color="Color.Primary">Group name</MudRadio>
                                        <MudRadio Option="@("size")" Color="Color.Primary">Group size</MudRadio>
                                    </MudRadioGroup>
                                </MudForm>
                            </td>
                        </tr>
                    </table>
                </MudItem>
            </Authorized>
           
        </AuthorizeView>

    </MudGrid>
</MudPaper>


@if (appState.TypeGroups != null)
{
    <MudGrid>
        <MudItem xs="12">
            <MudGrid Spacing="2" Justify="Justify.FlexStart">
                @foreach (var typeGroup in appState.TypeGroups)
                {
                    <MudItem xs="12" sm="6" md="3" xl="2">
                        <h3 style="text-align: center" class="mb-3 mt-5">@typeGroup.Name</h3>
                        <MudExpansionPanels MultiExpansion="true">
                            @foreach (var visualType in typeGroup.Types)
                            {
                                <VisualCtf.Shared.Type VisualType="visualType" AppState="appState" OnClick="OnTypeClicked"></VisualCtf.Shared.Type>
                            }
                        </MudExpansionPanels>
                    </MudItem>
                }
            </MudGrid>
        </MudItem>
    </MudGrid>
}

@if (showLoader)
{
    <div class="loading">
        <MudProgressCircular Indeterminate="true" />
    </div>
}




@code {
    private readonly AppState appState = new();
    private bool showLoader;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var apiKey = authState.User.Claims.FirstOrDefault(c => c.Type == AccountController.CtfKeyClaimType)?.Value;

        if (apiKey != null)
        {
            appState.ApiKey = apiKey;
            appState.Spaces = await Ctf.GetSpaces(apiKey);
        }
    }

    void OnTypeClicked(string typeId)
    {
        Highlight(typeId, HighlightType.Selected, true);
    }

    public void Highlight(string typeId, HighlightType highlightType, bool highLightReferences = false)
    {
        if (highLightReferences)
        {
            //clear all
            foreach (var type in appState.TypeGroups.SelectMany(g => g.Types))
            {
                type.Highlighted = HighlightType.None;
            }
        }

        var visualType = appState.TypeGroups.SelectMany(g => g.Types.Where(t => t.CtfType.SystemProperties.Id == typeId)).FirstOrDefault();
        if (visualType != null)
        {
            visualType.Highlighted = highlightType;
            if (highLightReferences)
            {
                //highlight child references
                foreach (var reference in visualType.FieldReferences.SelectMany(r => r.referenceTypes))
                {
                    Highlight(reference, HighlightType.SelectedChild);
                }
                //highlight parent references
                foreach (var type in appState.TypeGroups.SelectMany(g => g.Types))
                {
                    if (type.FieldReferences.Any(tr => tr.referenceTypes.Any(refId => refId == visualType.CtfType.SystemProperties.Id)))
                    {
                        Highlight(type.CtfType.SystemProperties.Id, HighlightType.SelectedParent);
                    }
                }
            }
        }
    }

    private async Task ShowTypes(string spaceId)
    {
        showLoader = true;
        await Ctf.GetTypes(spaceId, appState);
       // appState.TypeGroups = Ctf.GetTypeGroups(appState.Types);
        showLoader = false;
    }
}

