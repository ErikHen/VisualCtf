@page "/"
@using VisualCtf.Shared.Services
@using VisualCtf.Shared.Models

@inject ICtfService Ctf
@inject ICtfDeliveryService CtfDelivery
@inject IAppStateService StateService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAnalytics Analytics
@inject IJSRuntime JS

<MudPaper Elevation="0" Class="pa-5 mb-3">
    <MudGrid Spacing="2" Justify="Justify.FlexStart">
        <MudItem xs="12" md="4" xl="3">
            <h1>Visual CTF</h1>
            <p>Quickly get an overview of your Contentful content types.</p>
        </MudItem>
        <MudItem xs="12" sm="6" md="4" xl="3">
            <div class="d-flex justify-space-between">
                @if (_appState?.Spaces != null)
                {
                    <MudSelect T="String" Label="Space" Strict="true" Variant="Variant.Outlined" Format="F2" ValueChanged="NewSpaceSelected" SelectedValues="new HashSet<string>() {_appState.CurrentSpaceId}">
                        @foreach (var space in _appState.Spaces)
                        {
                            <MudSelectItem Value="@space.Id">@space.Name</MudSelectItem>
                        }
                    </MudSelect>
                }
                @if (_appState?.TypeGroups != null)
                {
                    <MudTooltip Text="Refresh" Placement="Placement.Top">
                        <MudIconButton Icon="@Icons.Material.Filled.Refresh" OnClick="() => LoadTypes(_appState.CurrentSpaceId)" Class="mt-2" />
                    </MudTooltip>

                }
            </div>
            @if (_appState?.TypeGroups != null)
            {
                <div class="d-flex flex-row mt-3 ">
                    <div class="d-flex mr-3 ">Selected<MudPaper Class="highlight-selected legend" Outlined="true"></MudPaper></div>
                    <div class="d-flex mr-3 ">Child&nbsp;reference<MudPaper Class="highlight-selectedchild legend" Outlined="true"></MudPaper></div>
                    <div class="d-flex">Parent&nbsp;reference<MudPaper Class="highlight-selectedparent legend" Outlined="true"></MudPaper></div>
                </div>
            }
            <AuthorizeView>
                <NotAuthorized>
                    <p>
                        Login with your regular Contentful username and password. <br />
                        Please read the <a href="/about">about section</a> before logging in for the first time.
                    </p><br />
                    <LoginButton />

                </NotAuthorized>
            </AuthorizeView>
        </MudItem>

        @if (_appState?.TypeGroups != null)
        {
            <MudItem xs="12" sm="6" md="4">
                <VisualizerSettings />
            </MudItem>
        }
    </MudGrid>
</MudPaper>


@if (_appState?.TypeGroups != null)
{
    <Types />
}

@if (showLoader)
{
    <div class="loading">
        <MudProgressCircular Indeterminate="true" />
    </div>
}


@code {
    private AppState _appState;
    private bool showLoader;

    protected override async Task OnAfterRenderAsync(bool firstTime)
    {
        if (firstTime)
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var apiKey = authState.User.Claims.FirstOrDefault(c => c.Type == User.CtfKeyClaimType)?.Value;

            if (apiKey != null)
            {
                _appState = StateService.AppState;
                if (_appState == null)
                {
                    _appState = new(apiKey);
                    _appState.Spaces = await Ctf.GetSpaces(apiKey);
                    await StateService.Set(_appState);
                }
                this.StateHasChanged();
            }
        }
    }

    private async Task NewSpaceSelected(string spaceId)
    {
        await JS.InvokeVoidAsync("VisualCtfGtag", "select_content", new { content_type = "space", item_id = spaceId.Remove(4)}); //anonymize spaceId
        await LoadTypes(spaceId);
    }

    private async Task LoadTypes(string spaceId)
    {
        showLoader = true;
        _appState.SearchTerm = string.Empty;
        _appState.CurrentSpaceId = spaceId;
        _appState.TypeGroups = await Ctf.GetTypes(_appState.CtfToken, _appState.CurrentSpaceId, _appState.GroupNameSeparator);
        _appState.TypeNameMapping = new Dictionary<string, string>();
        foreach (var type in _appState.Types)
        {
            _appState.TypeNameMapping.Add(type.Id, type.Name);
        }
        await StateService.Set(_appState);
        showLoader = false;
    }

}