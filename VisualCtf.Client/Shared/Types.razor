@using VisualCtf.Shared.Services
@using VisualCtf.Shared.Models
@inject IAppStateService StateService

@implements IDisposable

<MudGrid>
    <MudItem xs="12">
        <MudGrid Spacing="2" Justify="Justify.FlexStart">
            @if (StateService.AppState.DoGrouping)
            {
                var sortedGroups = StateService.AppState.SortGroupBy == "size" ? StateService.AppState.TypeGroups.OrderByDescending(g => g.Types.Count) : StateService.AppState.TypeGroups;
                @foreach (var typeGroup in sortedGroups)
                {
                    if (typeGroup.Types.Any(t => !t.IsHidden))
                    {
                        <MudItem xs="12" sm="6" md="3" xl="2">
                            <h3 style="text-align: center" class="mb-3 mt-3">@typeGroup.Name</h3>
                            <MudExpansionPanels MultiExpansion="true">
                                @foreach (var visualType in typeGroup.Types.Where(t => !t.IsHidden))
                                {
                                    <VisualCtf.Client.Shared.Type VisualType="visualType" OnClick="OnTypeClicked"></VisualCtf.Client.Shared.Type>
                                }
                            </MudExpansionPanels>
                        </MudItem>
                    }
                }
            }
            else
            {
                @foreach (var visualType in StateService.AppState.Types.Where(t => !t.IsHidden))
                {
                    <MudItem xs="12" sm="6" md="3" xl="2">
                        <VisualCtf.Client.Shared.Type VisualType="visualType" OnClick="OnTypeClicked"></VisualCtf.Client.Shared.Type>
                    </MudItem>
                }
            }

        </MudGrid>
    </MudItem>
</MudGrid>

@code {

    protected override void OnInitialized()
    {
        StateService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        StateService.OnChange -= StateHasChanged;
    }

    void OnTypeClicked(string typeId)
    {
        Highlight(typeId, HighlightType.Selected, true);
    }

    public void Highlight(string typeId, HighlightType highlightType, bool highLightReferences = false)
    {
        if (highLightReferences)
        {
            //clear all
            foreach (var type in StateService.AppState.TypeGroups.SelectMany(g => g.Types))
            {
                type.Highlighted = HighlightType.None;
            }
        }

        var visualType = StateService.AppState.TypeGroups.SelectMany(g => g.Types.Where(t => t.Id == typeId)).FirstOrDefault();
        if (visualType != null)
        {
            visualType.Highlighted = highlightType;
            if (highLightReferences)
            {
                //highlight child references
                foreach (var reference in visualType.FieldReferences.SelectMany(r => r.referenceTypes))
                {
                    Highlight(reference, HighlightType.SelectedChild);
                }
                //highlight parent references
                foreach (var type in StateService.AppState.TypeGroups.SelectMany(g => g.Types))
                {
                    if (type.FieldReferences.Any(tr => tr.referenceTypes.Any(refId => refId == visualType.Id)))
                    {
                        Highlight(type.Id, HighlightType.SelectedParent);
                    }
                }
            }
        }
    }

}
