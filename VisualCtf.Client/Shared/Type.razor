@using VisualCtf.Shared.Models
@using VisualCtf.Shared.Services
@inject ICtfService CtfService
@inject IAppStateService AppStateService


<MudExpansionPanel Text="@VisualType.Name" Class="@("highlight-" + Enum.GetName(typeof(HighlightType), VisualType.Highlighted)?.ToLower())"  @bind-IsExpanded="@_isPanelExpanded" >
    <div @onclick="@(() => OnClick.InvokeAsync(VisualType.Id))" class="type">
        <table class="infotable">
            @foreach (var field in VisualType.Fields)
            {
                <tr>
                    <td>
                        @field.Name
                        @if (VisualType.ShowDetails)
                        {
                            <br /><span class="smallText" style="font-weight: normal">Id:&nbsp;@field.Id</span>
                        }
                    </td>
                    <td>
                        @field.FriendlyTypeName
                        @if (VisualType.ShowDetails)
                        {
                            var refTypes = VisualType.FieldReferences.FirstOrDefault(r => r.fieldName == field.Name);
                            if (refTypes != null)
                            {
                                <span class="smallText" style="font-weight: normal"><br />Limited to:
                                @foreach (var rt in refTypes.referenceTypes)
                                {
                                    @(AppStateService.AppState.TypeNameMapping.TryGetValue(rt, out var typeName) ? typeName : rt)<br />

                                }
                                </span>
                            }
                        }
                    </td>
                </tr>
            }
        </table>

        <MudDivider DividerType="DividerType.Middle" Class="my-3" />
        <div class="smallText">
            @VisualType.Description<br /><br />
        </div>
        @if (VisualType.ShowDetails)
        {
            <table class="infotable smallText">
                <tr>
                    <td>Type Id</td>
                    <td>@VisualType.Id</td>
                </tr>
            </table>
        }
    <div class="d-flex justify-space-between" style="align-items: center;" @onclick:stopPropagation="true">
        <span class="smallText">Show more details</span>
        <MudSwitch Color="Color.Primary" @bind-Checked=@(VisualType.ShowDetails) Style="margin-right: 0" />

    </div>
        <div class="d-flex flex-row-reverse mt-2">
            <MudButton Variant="Variant.Text" Color="Color.Dark" Target="_ctfedit" Link="@($"https://app.contentful.com/spaces/{VisualType.SpaceId}/content_types/{VisualType.Id}/fields")" Class="ml-3">
                Edit
            </MudButton>
            <MudButton Variant="Variant.Text" Color="Color.Dark" Target="_ctfentries" Link="@($"https://app.contentful.com/spaces/{VisualType.SpaceId}/entries?contentTypeId={VisualType.Id}")">
                View entries
            </MudButton>

        </div>
    </div>
</MudExpansionPanel>

@code
{
    [Parameter]
    public VisualType VisualType { get; set; }

    [Parameter]
    public EventCallback<string> OnClick { get; set; }

    private bool _isPanelExpanded
    {
        get => VisualType.IsExpanded;
        set
        {
            VisualType.IsExpanded = value;
            if (VisualType.IsExpanded) //only highlight when expanding
            {
                OnClick.InvokeAsync(VisualType.Id);
            }

        }
    }
}
